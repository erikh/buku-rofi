#!/bin/bash

# The code bellow is based on [carnager/buku_run](https://github.com/carnager/buku_run) project, that is licensed under GPL 3.0.

# This file is part of buku-rofi distribution (https://gitlab.com/lbcnz/buku-rofi).
# Copyright (c) 2020 lbcnz.
# 
# This program is free software: you can redistribute it and/or modify  
# it under the terms of the GNU General Public License as published by  
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

_rofi () {
    rofi -dmenu -i -sort -no-levenshtein-sort -width 1300 -lines 40 "$@"
}

# display settings
help_color="#2d7ed8"

# keybindings
switch_view="Alt+Tab"
new_bookmark="Alt+n"
edit="Alt+e"
delete="Alt+d"

main () {
    HELP="<span color='${help_color}'>${new_bookmark}</span> to add a Bookmark, <span color='${help_color}'>${edit}</span> to Edit, <span color='${help_color}'>${delete}</span> to Delete, <span color='${help_color}'>${switch_view}</span> to switch View"
    
    if [[ $mode == "bookmarks" ]]; then
        content=$(parseBuku)
        menu=$(_rofi -p '> ' -mesg "${HELP}" -kb-custom-1 "${new_bookmark}" -kb-custom-2 "${switch_view}" -kb-custom-4 "${edit}" -kb-custom-5 "${delete}" <<< "${content}")
    elif [[ $mode == "tags" ]]; then
        menu=$(buku --np --st | gawk '{$NF=""; print $0}' | cut -d ' ' -f2-  | _rofi -p '> ' -mesg "${HELP}" -kb-custom-2 "${switch_view}" -kb-custom-4 "${edit}" -kb-custom-5 "${delete}")
    fi
    val=$?
    if [[ $val -eq 1 ]]; then
        exit
    elif [[ $val -eq 10 ]]; then
        addMark
    elif [[ $val -eq 14 ]]; then
        deleteMenu
    elif [[ $val -eq 13 ]]; then
        editMenu
    elif [[ $val -eq 11 ]]; then
        if [[ $mode == "bookmarks" ]]; then
            export mode="tags"
            mode=tags main
        elif [[ $mode == "tags" ]]; then
            export mode="bookmarks"
            mode=bookmarks main
        fi
    elif [[ $val -eq 0 ]]; then
        if [[ $mode == "bookmarks" ]]; then
            id=$(getId "$content" "$menu")
            for bm in ${id}; do
                buku -o "${bm}"
            done
        elif [[ $mode == "tags" ]]; then
            filter="${menu}" mode="bookmarks" main
        fi
    fi
}

deleteMenu () {
    if [[ $mode == "bookmarks" ]]; then
        id=$(getId "$content" "$menu")
        delask=$(echo -e "1. Yes\n2. No" | _rofi -p '> ' -mesg "Really delete bookmark?")
        val=$?
        if [[ $val -eq 1 ]]; then
            exit
        elif [[ $val -eq 0 ]]; then
            if [[ $delask == "1. Yes" ]]; then
                buku -d "${id}" --tacit
                mode=bookmarks main
            elif [[ $delask == "2. No" ]]; then
                mode=bookmarks main
            fi
        fi

# Buku asks for confirmation before deleting tag from all bookmars and --tacit does nothing. I'm disabling this feature.
: << 'END'
    elif [[ $mode == "tags" ]]; then
        delask=$(echo -e "1. Yes\n2. No" | _rofi -p '> ' -mesg "Really delete tag?")
        val=$?
        if [[ $val -eq 1 ]]; then
            exit
        elif [[ $val -eq 0 ]]; then
            if [[ $delask == "1. Yes" ]]; then
                buku --replace "${menu}"
                mode=tags main
            elif [[ $delask == "2. No" ]]; then
                mode=tags main
            fi
        fi
END
    # alternative code
    elif [[ $mode == "tags" ]]; then
        mode=tags main
    fi
}

editMenu () {
    if [[ $mode == "bookmarks" ]]; then
        id=$(getId "$content" "$menu")
        metadata=$(getMetaData "$id")
        title="$(getTitleFromId "$metadata")"
        bookmark="$(getUrlFromId "$metadata")"
        tags="$(getTagsFromId "$metadata")"
        content=$(echo -e "1. title: $title\n2. url: $bookmark\n3. tags: $tags")
        editmenu=$(echo -e "< Return\n---\n${content}" | _rofi -p '> ')
        val=$?
        if [[ $val -eq 1 ]]; then
            exit
        elif [[ $val -eq 0 ]]; then
            if [[ $editmenu == "< Return" ]]; then
                main
            elif [[ $editmenu == "tags: NOTAG" ]]; then
                addTags --update
            elif [[ $editmenu =~ tags:* ]]; then
                tags="${tags}" editTags
            elif [[ $editmenu =~ url:* ]]; then
                editBookmark
            elif [[ $editmenu =~ title:* ]]; then
                editTitle
            fi
        fi
    
    # FIXME: It should be working but it isn't.
    elif [[ $mode == "tags" ]]; then
        newtag=$(_rofi -p '> ' -mesg "Enter new tag name for tag \"${menu}\"")
        val=$?
        if [[ $val -eq 1 ]]; then
            exit
        elif [[ $val -eq 0 ]]; then
            if [[ -n $newtag ]]; then
                buku --replace "${menu}" "${newtag}"
            fi
        fi
        mode=tags main
    fi
}

editTags () {
    edittagsmenu=$(_rofi -filter "${tags}" -p '> ' -mesg "Edit Tags and hit Enter")
    val=$?
    if [[ $val -eq 1 ]]; then
        exit
    elif [[ $val -eq 0 ]]; then
        buku -u "${id}" --tag "${edittagsmenu}"
    fi
    mode=bookmarks main
}

editBookmark () {
    bmarkmenu=$(_rofi -p "> " -filter "${bookmark}" -mesg "Edit Bookmark and hit Enter")
    val=$?
    if [[ $val -eq 1 ]]; then
        exit
    elif [[ $val -eq 0 ]]; then
        if [[ $bmarkmenu == "http"* ]]; then
            buku -u "${id}" --url "${bmarkmenu}"
        else
            echo "" | rofi -e "Not a valid URI, Make sure URLs start with http"
            editBookmark
        fi
    fi
    mode=bookmarks main
}

editTitle () {
  titlemenu=$(_rofi -p "> " -filter "${title}" -mesg "Edit Title and hit Enter")
  val=$?
  if [[ $val -eq 1 ]]; then
    exit
  elif [[ $val -eq 0 ]]; then
    buku -u "${id}" --title "${titlemenu}"
  fi
  mode=bookmarks main
}

addMark () {
    inserturl=$(echo -e "$(xclip -o)" | _rofi -p '> ' -mesg "Use URL below or type manually")
    val=$?
    if [[ $val -eq 1 ]]; then
        exit
    elif [[ $val -eq 0 ]]; then
        addTags
    fi
}

addTags () {
    inserttags=$(buku --np --st | gawk '{$NF=""; print $0}' | cut -d ' ' -f2- | _rofi -p '> ' -mesg "Add some tags. Separate tags with ', '")
    val=$?
    if [[ $val -eq 1 ]]; then
        exit
    elif [[ $val -eq 0 ]]; then
        taglist="$(tr '\n' ',' <<< "${inserttags}")"
        if [[ $1 == "--update" ]]; then
            buku -u "${id}" --tag "${taglist}"
        else
            buku -a "${inserturl}" "${taglist}"
        fi
    fi
}

parseBuku () {
  buku --nc --np -p --tacit | gawk -v max="80" -v type="1" '
BEGIN {
  RS=""
  FS="\n"
}
{
  if (NF == 4)
    tagline = $4
  else {
    tagexists = match($3, /\s+ # /)
    if (tagexists == 0)
      tagline = " # NOTAG"
    else
      tagline = $3
  }
  id = gensub(/([0-9]+)\.(.*)/, "\\1", "g", $1)
  url = substr(gensub(/\s+> (.*)/, "\\1", "g", $2),0,max)
  tags = gensub(/\s+# (.*)/, "\\1", "g", tagline)
  title = substr(gensub(/[0-9]+\.\s*(.*)/, "\\1", "g", $1),0,max)
  if (type == 1)
    print id "\t" url "\t" tags
  else {
    print id "\t" title "\t" tags
    if (type == 3)
      print " \t" url "\t "
  }
  print ""
}
' | column -t -s $'\t'
}

getId () {
  id="${2%% *}"
  if [ -z "$id" ]; then
    prev=""
    IFS=$'\n'
    for line in $1; do
      if [ "$2" = "$line" ]; then
        id="${prev%% *}"
        break
      else
        prev="$line"
      fi
    done
  fi
  echo "$id"
}

getMetaData () {
  buku --nc -p "$1"
}

getTitleFromId () {
  gawk '
  BEGIN {
    RS=""
    FS="\n"
  }
  {
    print gensub(/[0-9]+\.\s*(.*)/, "\\1", "g", $1)
  }
  ' <<< "$1"
}

getUrlFromId () {
  gawk '
  BEGIN {
    RS=""
    FS="\n"
  }
  {
    print gensub(/\s+> (.*)/, "\\1", "g", $2)
  }
  ' <<< "$1"

}

getTagsFromId () {
  gawk '
  BEGIN {
    RS=""
    FS="\n"
  }
  {
    print gensub(/\s+# (.*)/, "\\1", "g", $3)
  }
  ' <<< "$1"

}

mode=bookmarks main

